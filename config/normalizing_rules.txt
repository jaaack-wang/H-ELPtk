th' are	they are	#---------> contraction
th' art	they are				#######################################################
(\S+) 'rt	\1 are			# 1. The normalizing regex rules help convert the     #
o 'th	of the				# spelling of the Early Modern English into           #
do 't	do it				# the contemporary accepted ones.                     #
heav'n	heaven				#                                                     #
ev'ry	every				# 2. The target patterns should contain as many       #
e'ery	every				# tokens as the replace patterns tokenized by         #
e'er	ever				# whitespaces so that the normalized tokens match     # 
ne'er	never				# strictly with the non-normalized ones.              #
o'er	over				#                                                     #
e'en	even				# 3. If you add any additional normalizing rule       #
ev'n	even				# that involves a target pattern with apostrophe,     #
pow'r	power				# please modify the preprocessing rules as well.      #
giv'n	given				# As the standard Stanford Tokenizer tends to split   #
int'rest	interest				# words with apostrophe into two tokens, we need to   #
int'resting	interesting		# undo this tokenization when it is unwanted.         #
whil'st	whilst				#                                                     #
t' other	the other			# 4. Using whitespaces as clues to tokenize is fine,  #
on 't	on it				# but at the cost of coarse-grained tokenization and  #
is 't	is it				# a less ideal pos tagging. If we do that, remove     #
d' ye	do you				# the middle space in the target pattern if any.      #
for 't	for it				#                                                     #
(\S+) 't was	\1 it was		# 5. You may need to change "\" into "$" or others    # 
(\S+) 't were	\1 it were		# if you apply the rules not on Python, such as Java. #
(\S+) 't is	\1 it is			# The other patterns should be fine to use directly.  #
(\S+) 't would	\1 it would		#######################################################
th' (\S+)	the \1
thou	you	#---------> pronoun
ye	you
thee	you
thy	your
thine	yours
(sh|c|w)ouå—¨'d	\1ould	#---------> modal verbs
canst	can
shalt	shall
wouldst	would
shouldst	should
mayest	may
mightest	might
may'st	may
should'st	should
couldst	could
shouldest	should
quoth	quotes	#---------> 3rd per singular: eth/th (Regulars will be generated common_verbs.txt)
hath	has
doth	does
doeth	does
saith	says
beeth	be
hadst	had	#---------> 2nd per singular: st/'st (Regulars will be generated common_verbs.txt)
didst	did
hast	have
hadst	had
wert	were
a-(\S+ing)	\1	#---------> verb + ing
unto	to	#---------> other words
publick	public
publike	public
oft	often
shew	show
shewed	showed
shewn	shown
shewing	showing
adde	add
alwaies	always
blest	blessed
betwixt	between
perswade	persuade
satisfie	satisfy
finde	find
ruine	ruin
antient	ancient
soveraign	sovereign
possest	possessed
justifie	justify
writ	write
chuse	choose
surprize	surprise